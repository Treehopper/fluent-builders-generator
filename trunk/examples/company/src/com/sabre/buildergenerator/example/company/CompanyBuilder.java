/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package com.sabre.buildergenerator.example.company;

import com.sabre.buildergenerator.example.company.Address;
import com.sabre.buildergenerator.example.company.Company;
import com.sabre.buildergenerator.example.company.Person;
import java.util.ArrayList;
import java.util.List;

public class CompanyBuilder extends CompanyBuilderBase<CompanyBuilder> {
    public static CompanyBuilder company() {
        return new CompanyBuilder();
    }

    public CompanyBuilder() {
        super(new Company());
    }

    public Company build() {
        return getInstance();
    }
}

@SuppressWarnings("unchecked")
class CompanyBuilderBase<GeneratorT extends CompanyBuilderBase> {
    private final Company instance;

    protected CompanyBuilderBase(Company aInstance) {
        instance = aInstance;
    }

    protected Company getInstance() {
        return instance;
    }

    public GeneratorT withLocation(Address aValue) throws Exception {
        instance.setLocation(aValue);

        return (GeneratorT) this;
    }

    public LocationAddressBuilder withLocation() throws Exception {
        Address obj = new Address();

        return withLocation(obj).new LocationAddressBuilder(obj);
    }

    public GeneratorT withEmployees(List<? extends Person> aValue) {
        instance.setEmployees(aValue);

        return (GeneratorT) this;
    }

    public GeneratorT withAddedEmployee(Person aValue) {
        if (instance.getEmployees() == null) {
            instance.setEmployees(new ArrayList<Person>());
        }

        ((ArrayList<Person>) instance.getEmployees()).add(aValue);

        return (GeneratorT) this;
    }

    public EmployeePersonBuilder withAddedEmployee() {
        Person obj = new Person();

        return withAddedEmployee(obj).new EmployeePersonBuilder(obj);
    }

    public GeneratorT withName(String aValue) {
        instance.setName(aValue);

        return (GeneratorT) this;
    }

    public class LocationAddressBuilder extends AddressBuilderBase<LocationAddressBuilder> {
        public LocationAddressBuilder(Address aInstance) {
            super(aInstance);
        }

        public GeneratorT endLocation() {
            return (GeneratorT) CompanyBuilderBase.this;
        }
    }

    public class EmployeePersonBuilder extends PersonBuilderBase<EmployeePersonBuilder> {
        public EmployeePersonBuilder(Person aInstance) {
            super(aInstance);
        }

        public GeneratorT endEmployee() {
            return (GeneratorT) CompanyBuilderBase.this;
        }
    }
}

@SuppressWarnings("unchecked")
class PersonBuilderBase<GeneratorT extends PersonBuilderBase> {
    private final Person instance;

    protected PersonBuilderBase(Person aInstance) {
        instance = aInstance;
    }

    protected Person getInstance() {
        return instance;
    }

    public GeneratorT withAddress(Address aValue) {
        instance.setAddress(aValue);

        return (GeneratorT) this;
    }

    public AddressAddressBuilder withAddress() {
        Address obj = new Address();

        return withAddress(obj).new AddressAddressBuilder(obj);
    }

    public GeneratorT withFirstName(String aValue) {
        instance.setFirstName(aValue);

        return (GeneratorT) this;
    }

    public GeneratorT withLastName(String aValue) {
        instance.setLastName(aValue);

        return (GeneratorT) this;
    }

    public class AddressAddressBuilder extends AddressBuilderBase<AddressAddressBuilder> {
        public AddressAddressBuilder(Address aInstance) {
            super(aInstance);
        }

        public GeneratorT endAddress() {
            return (GeneratorT) PersonBuilderBase.this;
        }
    }
}

@SuppressWarnings("unchecked")
class AddressBuilderBase<GeneratorT extends AddressBuilderBase> {
    private final Address instance;

    protected AddressBuilderBase(Address aInstance) {
        instance = aInstance;
    }

    protected Address getInstance() {
        return instance;
    }

    public GeneratorT withCity(String aValue) {
        instance.setCity(aValue);

        return (GeneratorT) this;
    }

    public GeneratorT withNumber(int aValue) {
        instance.setNumber(aValue);

        return (GeneratorT) this;
    }

    public GeneratorT withStreet(String aValue) {
        instance.setStreet(aValue);

        return (GeneratorT) this;
    }
}
